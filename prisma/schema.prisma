generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int       @id @default(autoincrement())
  name      String?
  username  String    @unique
  password  String
  type      AdminType
  createtAt DateTime  @default(now())
  provider  Provider?
  agent     Agent?
}

model Provider {
  id             Int              @id @default(autoincrement())
  name           String
  phone          String?
  address        String?
  adminId        Int?             @unique
  createtAt      DateTime         @default(now())
  walletAmount   Float            @default(0)
  active         Boolean          @default(true)
  cards          Card[]
  payments       Payment[]
  admin          Admin?           @relation(fields: [adminId], references: [id])
  sellers        Seller[]
  wallets        Wallet[]
  providerWallet ProviderWallet[]
  agents         Agent[]
  agentCards     AgentCard[]
}

model Agent {
  id           Int           @id @default(autoincrement())
  name         String
  phone        String?
  address      String?
  adminId      Int?          @unique
  sellers      Seller[]
  providerId   Int
  provider     Provider      @relation(fields: [providerId], references: [id])
  createtAt    DateTime      @default(now())
  walletAmount Float         @default(0)
  active       Boolean       @default(true)
  agentWallet  AgentWallet[]
  admin        Admin?        @relation(fields: [adminId], references: [id])
  wallets      Wallet[]
  payments     Payment[]
  agentCards   AgentCard[]
}

model AgentWallet {
  id        Int      @id @default(autoincrement())
  amount    Float    @default(0)
  date      DateTime @default(now())
  createtAt DateTime @default(now())
  agent     Agent?   @relation(fields: [agentId], references: [id])
  agentId   Int?
}

model ProviderWallet {
  id         Int      @id @default(autoincrement())
  amount     Float    @default(0)
  date       DateTime @default(now())
  createtAt  DateTime @default(now())
  providerId Int
  provider   Provider @relation(fields: [providerId], references: [id])
}

model Seller {
  id            Int       @id @default(autoincrement())
  name          String
  username      String    @unique
  password      String
  address       String?
  phone         String?
  providerId    Int
  agentId       Int?
  walletAmount  Int       @default(0)
  paymentAmount Int       @default(0)
  isHajji       Boolean   @default(false)
  createtAt     DateTime  @default(now())
  active        Boolean   @default(true)
  payments      Payment[]
  provider      Provider  @relation(fields: [providerId], references: [id])
  wallet        Wallet[]
  agent         Agent?    @relation(fields: [agentId], references: [id])
}

model Wallet {
  id         Int        @id @default(autoincrement())
  amount     Float
  date       DateTime   @default(now())
  createtAt  DateTime   @default(now())
  sellerId   Int
  providerId Int?
  agentId    Int?
  Provider   Provider?  @relation(fields: [providerId], references: [id])
  Agent      Agent?     @relation(fields: [agentId], references: [id])
  seller     Seller     @relation(fields: [sellerId], references: [id])
  from       FromWallet @default(PROVIDER)
}

model Payment {
  id             Int       @id @default(autoincrement())
  companyCardID  Int
  providerCardID Int
  price          Float
  qty            Int
  createtAt      DateTime  @default(now())
  sellerId       Int?
  item           Json?
  providerId     Int?
  agentId        Int?
  activeBy       Json?
  companyPrice   Float?
  provider       Provider? @relation(fields: [providerId], references: [id])
  agent          Agent?    @relation(fields: [agentId], references: [id])
  seller         Seller?   @relation(fields: [sellerId], references: [id])
}

model Card {
  id           Int         @id @default(autoincrement())
  price        Float
  companyPrice Float
  providerId   Int?
  cardTypeId   Int
  active       Boolean     @default(true)
  createtAt    DateTime    @default(now())
  cardType     CardType    @relation(fields: [cardTypeId], references: [id])
  provider     Provider?   @relation(fields: [providerId], references: [id])
  agentCards   AgentCard[]
}

model AgentCard {
  id           Int      @id @default(autoincrement())
  price        Float
  companyPrice Float
  agentId      Int
  providerId   Int
  cardId       Int
  createtAt    DateTime @default(now())
  card         Card     @relation(fields: [cardId], references: [id])
  cardType     CardType @relation(fields: [cardTypeId], references: [id])
  cardTypeId   Int
  agent        Agent    @relation(fields: [agentId], references: [id])
  provider     Provider @relation(fields: [providerId], references: [id])
}

model CardType {
  id            Int         @id @default(autoincrement())
  image         String
  name          String
  companyCardID Int
  createtAt     DateTime    @default(now())
  active        Boolean     @default(true)
  cards         Card[]
  agentCards    AgentCard[]
}

enum AdminType {
  ADMIN
  PROVIDER
  AGENT
}

enum FromWallet {
  PROVIDER
  AGENT
}
