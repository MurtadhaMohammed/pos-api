generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int       @id @default(autoincrement())
  name      String?
  username  String    @unique
  password  String
  type      AdminType
  createtAt DateTime  @default(now())
  provider  Provider?
}

model Provider {
  id             Int              @id @default(autoincrement())
  name           String
  phone          String?
  address        String?
  adminId        Int?             @unique
  createtAt      DateTime         @default(now())
  active         Boolean          @default(true)
  walletAmount   Float            @default(0)
  roles          Json?
  cards          Card[]
  payments       Payment[]
  admin          Admin?           @relation(fields: [adminId], references: [id])
  providerWallet ProviderWallet[]
  sellers        Seller[]
  wallets        Wallet[]
  customPrice    CustomPrice[]
  archive        Archive[]
  stock          Stock[]
}

model ProviderWallet {
  id         Int      @id @default(autoincrement())
  amount     Float    @default(0)
  date       DateTime @default(now())
  createtAt  DateTime @default(now())
  providerId Int
  provider   Provider @relation(fields: [providerId], references: [id])
}

model Seller {
  id            Int       @id @default(autoincrement())
  name          String
  username      String    @unique
  password      String
  address       String?
  phone         String?
  providerId    Int
  walletAmount  Int       @default(0)
  paymentAmount Int       @default(0)
  isHajji       Boolean   @default(false)
  createtAt     DateTime  @default(now())
  active        Boolean   @default(true)
  payments      Payment[]
  provider      Provider  @relation(fields: [providerId], references: [id])
  wallet        Wallet[]
  stock         Stock[]
}

model Wallet {
  id         Int         @id @default(autoincrement())
  amount     Float
  date       DateTime    @default(now())
  createtAt  DateTime    @default(now())
  sellerId   Int
  providerId Int?
  from       FromWallet  @default(PROVIDER)
  Provider   Provider?   @relation(fields: [providerId], references: [id])
  seller     Seller      @relation(fields: [sellerId], references: [id])
  type       PaymentType @default(PAYMENT)
}

model Payment {
  id             Int       @id @default(autoincrement())
  companyCardID  Int
  providerCardID Int
  price          Float
  qty            Int
  createtAt      DateTime  @default(now())
  sellerId       Int?
  item           Json?
  localCard      Json?
  providerId     Int?
  activeBy       Json?
  companyPrice   Float?
  provider       Provider? @relation(fields: [providerId], references: [id])
  seller         Seller?   @relation(fields: [sellerId], references: [id])
}

model Card {
  id           Int       @id @default(autoincrement())
  price        Float
  companyPrice Float
  sellerPrice  Float     @default(0)
  providerId   Int?
  cardTypeId   Int
  createtAt    DateTime  @default(now())
  active       Boolean   @default(true)
  cardType     CardType  @relation(fields: [cardTypeId], references: [id])
  provider     Provider? @relation(fields: [providerId], references: [id])
}

model CardType {
  id            Int       @id @default(autoincrement())
  image         String
  name          String
  companyCardID Int
  createtAt     DateTime  @default(now())
  active        Boolean   @default(true)
  cards         Card[]
  category      Category? @relation(fields: [categoryId], references: [id])
  categoryId    Int?
}

model Category {
  id        Int        @id @default(autoincrement())
  image     String?
  title     String
  active    Boolean    @default(true)
  cardTypes CardType[]
}

model Plan {
  id          Int           @id @default(autoincrement())
  title       String
  image       String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  active      Boolean       @default(true)
  hidden      Boolean       @default(false)
  stock       Stock[]
  archive     Archive[]
  customPrice CustomPrice[]
}

model CustomPrice {
  id           Int       @id @default(autoincrement())
  plan         Plan?     @relation(fields: [planId], references: [id])
  planId       Int?
  provider     Provider? @relation(fields: [providerId], references: [id])
  providerId   Int?
  price        Float     @default(0)
  sellerPrice  Float     @default(0)
  companyPrice Float     @default(0)
  active       Boolean   @default(true)
}

model Stock {
  id         Int        @id @default(autoincrement())
  serial     String     @unique
  code       String     @unique
  active     Boolean    @default(true)
  createdAt  DateTime   @default(now())
  hold_id    String?
  hold_at    DateTime?
  status     CodeStatus @default(Ready)
  archiveId  Int?
  sold_at    DateTime?
  planId     Int?
  plan       Plan?      @relation(fields: [planId], references: [id])
  archive    Archive?   @relation(fields: [archiveId], references: [id])
  provider   Provider?  @relation(fields: [providerId], references: [id])
  providerId Int?
  seller     Seller?    @relation(fields: [sellerId], references: [id])
  sellerId   Int?
  isOld      Boolean    @default(false)
}

model Archive {
  id             Int       @id @default(autoincrement())
  group_title    String
  qty            Int?
  reciption_date DateTime?
  note           String?
  active         Boolean   @default(true)
  stock          Stock[]
  provider       Provider? @relation(fields: [providerId], references: [id])
  providerId     Int?
  createtAt      DateTime  @default(now())
  plan           Plan?     @relation(fields: [planId], references: [id])
  planId         Int?
}

enum CodeStatus {
  Ready
  Error
  Hold
  Used
  Recived
  Sold
}

enum AdminType {
  ADMIN
  PROVIDER
  AGENT
}

enum FromWallet {
  PROVIDER
  AGENT
}

enum PaymentType {
  PAYMENT
  REFUND
}
